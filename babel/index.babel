const tau = 2 * Math.PI
const { random } = _
const { abs, max, sin, cos } = Math

class Vector {
  constructor (x = 0, y = 0) {
    this.x = x
    this.y = y
  }
  
  static fromPolar (r, a) {
    let x = r * cos(a),
        y = r * sin(a)
    return new Vector(x, y)
  }
  
  clone () {
    return new Vector(this.x, this.y)
  }
  
  add (v) {
    this.x += v.x
    this.y += v.y
    return this
  }
  
  mul (x) {
    this.x *= x
    this.y *= x
    return this
  }
  
  dist (v) {
    let dx, dy
    return Math.sqrt(
      (dx = this.x - v.x) * dx,
      (dy = this.y - v.y) * dy)
  }
  
  get r () {
    return Math.sqrt(
      this.x * this.x +
      this.y * this.y)
  }
  
  set r (r) {
    let n = this.norm()
    this.x = r * n.x
    this.y = r * n.y
    return r
  }
  
  get a () {
    return Math.atan2(this.y, this.x)
  }
  
  set a (a) {
    let r = this.r
    this.x = r * cos(a)
    this.y = r * sin(a)
    return a
  }
  
  norm () {
    let r = this.r
    return new Vector(
      this.x / r, this.y / r)
  }
}

// canvas' built-in drawing methods have a lot of
// overhead. this buffer class is for optimized
// drawing of pixels with alpha. it works by directly 
// manipulating pixel data and flushing to the canvas
// by calling putImageData
class CanvasBuffer {
  constructor (canvas) {
    this.ctx = canvas.getContext("2d")
    this.w = canvas.width
    this.h = canvas.height
    this.clear()
  }
  
  clear () {
    this.ctx.fillStyle = "#000"
    this.ctx.fillRect(0, 0, this.w, this.h)
    this.buf = this.ctx.getImageData(0, 0, this.w, this.h)
  }
  
  // draws floating point coordinate pixel
  // similar to antialiasing
  drawPixel (x, y, c) {
    let fx = ~~x,
        fy = ~~y,
        dx = x - fx,
        dy = y - fy
    
    this.drawCell(fx, fy, c, (1 - dx) * (1 - dy))
    this.drawCell(fx + 1, fy, c, dx * (1 - dy))
    this.drawCell(fx, fy + 1, c, (1 - dx) * dy)
    this.drawCell(fx + 1, fy + 1, c, dx * dy)
  }
  
  // set color of cell with alpha, for drawPixel
  drawCell (x, y, c, a) {
    if (x < 0 || x >= this.w) return
    if (y < 0 || y >= this.h) return
    
    let data = this.buf.data,
        i = 4 * (x + y * this.w),
        r = data[i + 0],
        g = data[i + 1],
        b = data[i + 2]
    
    a *= c[3]
    r += c[0] * a
    g += c[1] * a
    b += c[2] * a
    
    // overflow color math so red + red = white
    let ro = max(0, r - 255),
        go = max(0, g - 255),
        bo = max(0, b - 255),
        to = (ro + bo + go) / 3
    
    data[i + 0] = r + to
    data[i + 1] = g + to
    data[i + 2] = b + to
  }
  
  flush () {
    this.ctx.putImageData(this.buf, 0, 0)
  }
}

class Noise {
  constructor (w, h, oct, si = 0) {
    this.width = w
    this.height = h
    this.octaves = oct
    this.canvas = Noise.compositeNoise(w, h, oct, si)
    let ctx = this.canvas.getContext('2d')
    this.data = ctx.getImageData(0, 0, w, h).data
  }
  
  // create w by h noise
  static noise (w, h) {
    let cv = document.createElement('canvas'),
        ctx = cv.getContext('2d')
    
    cv.width = w
    cv.height = h
    
    let img = ctx.getImageData(0, 0, w, h),
        data = img.data
    
    for (let i = 0, l = data.length; i < l; i += 4) {
      data[i + 0] = random(0, 255)
      data[i + 1] = random(0, 255)
      data[i + 2] = random(0, 255)
      data[i + 3] = 255
    }
    
    ctx.putImageData(img, 0, 0)
    return cv;
  }
  
  // create composite noise with multiple octaves
  static compositeNoise (w, h, soct, eoct) {
    let cv = document.createElement('canvas'),
        ctx = cv.getContext('2d')
    
    cv.width = w
    cv.height = h
    
    ctx.fillStyle = '#000'
    ctx.fillRect(0, 0, w, h)
    
    ctx.globalCompositeOperation = 'lighter'
    ctx.globalAlpha = 1 / (eoct - soct)
    
    for (let i = soct; i < eoct; i++) {
      let noise = Noise.noise(w >> i, h >> i)
      ctx.drawImage(noise, 0, 0, w, h)
    }
    
    return cv
  }
  
  // returns noise value from -1.0 to 1.0
  getNoise (x, y, ch = 0) {
    // bitwise ~~ to floor
    let i = (~~x + ~~y * this.width) * 4
    return this.data[i + ch] / 127.5 - 1
  }
}

class Particle {
  constructor (x = 0, y = 0, vx = 0, vy = 0) {
    this.pos = new Vector(x, y)
    this.vel = new Vector(vx, vy)
    this.acc = new Vector(0, 0)
    this.col = [127, 255, 0, 0.1]
  }
  
  update (noise) {
    let { x, y } = this.pos
    let dx = noise.getNoise(x, y, 0),
        dy = noise.getNoise(x, y, 1),
        d = new Vector(dx, dy)
    
    this.col[3] *= 0.99
    
    // this.vel.add(this.acc)
    // this.acc.add(d.mul(0.1))
    // this.acc.mul(0.95)
    this.vel.add(d)
    this.vel.mul(0.95)
  }
}

class ParticleSystem {
  constructor (num, noise) {
    this.noise = noise
    this.particles = []
    
    for (let i = 0; i < num; i++) {
      this.particles.push(new Particle())
    }
    
    let r = (h / 2) * (5 / 6)
    
    // this.random()
    // this.circle(r)
    // this.star(r)
    this.polygon(r, 3)
    // this.fn(x => (random() ? -1 : 1) * abs(x), [-w / 2, w / 2])
    this.rainbowify()
  }
  
  circle (radius, thickness = 0) {
    for (let p of this.particles) {
      // get random radius and angle
      let r1 = radius + thickness * random(-0.5, 0.5),
          a1 = random(0, tau),
          r2 = random(0, 1, true),
          a2 = random(0, tau)
      
      let pos = Vector.fromPolar(r1, a1),
          vel = Vector.fromPolar(-3, a1)
      
      pos.add(new Vector(w / 2, h / 2))
      
      p.pos = pos
      p.vel = vel
    }
  }
  
  polygon (radius, sides) {
    // calculate lines of polygon
    let lines = []
    for (let i = 0; i < sides; i++) {
      let a = i * tau / sides - tau / 4,
          x1 = radius * cos(a),
          y1 = radius * sin(a),
          x2 = radius * cos(a + tau / sides),
          y2 = radius * sin(a + tau / sides)
      lines.push({ x1, y1, x2, y2 })
    }
    
    let yd = (abs(lines[0].y1) - abs(lines[sides >> 1].y1)) / 2
    
    for (let p of this.particles) {
      // choose random line
      let { x1, x2, y1, y2 } = lines[random(0, sides - 1)]
      // lerp between points
      let t = random(0, 1, true),
          x = x1 + t * (x2 - x1),
          y = y1 + t * (y2 - y1)
      
      let pos = new Vector(x, y),
          vel = pos.norm().mul(2)
      
      // center on canvas
      pos.add(new Vector(w / 2, h / 2 + yd))
      
      p.pos = pos
      p.vel = vel
    }
  }
  
  star (radius) {
    // calculate lines of star
    let lines = []
    for (let i = 0; i < 5; i++) {
      let a = i * tau / 5 - tau / 4,
          x1 = radius * cos(a),
          y1 = radius * sin(a),
          x2 = radius * cos(a + tau * 2 / 5),
          y2 = radius * sin(a + tau * 2 / 5)
      lines.push({ x1, y1, x2, y2 })
    }
    
    // centering factor
    let yd = (abs(lines[0].y1) - abs(lines[2].y1)) / 2
    
    for (let p of this.particles) {
      // choose random line 
      let { x1, x2, y1, y2 } = lines[random(0, 4)]
      
      // magic number is tip to valley on star
      let t = random(0, 0.381966011250105)
      if (random(0, 1)) t = 1 - t
      
      // lerp between points
      let x = x1 + t * (x2 - x1),
          y = y1 + t * (y2 - y1)
      
      let pos = new Vector(x, y),
          vel = pos.norm().mul(2)
      
      // center on canvas
      pos.add(new Vector(w / 2, h / 2 + yd))
      
      p.pos = pos
      p.vel = vel
    }
  }
  
  fn (fn, domain) {
    for (let p of this.particles) {
      let x = random(...domain, 1),
          y = fn(x),
          t = (x + domain[0]) / (domain[1] - domain[0]),
          rgb = hsl2rgb(t, 1, 0.5)
      
      let pos = new Vector(x, y),
          vel = pos.norm().mul(2)
      
      pos.add(new Vector(w / 2, h / 2))
      rgb.push(p.col[3])
      
      p.col = rgb
      p.pos = pos
      p.vel = vel
    }
  }
  
  random () {
    for (let p of this.particles) {
      let x = random(0, w, true),
          y = random(0, h, true)
      p.pos = new Vector(x, y)
      // p.vel = Vector.fromPolar(5, random(0, tau))
      // p.vel = new Vector(0, 0)
    }
  }
  
  freeze () {
    for (let p of this.particles) 
      p.vel.mul(0)
  }
  
  update () {
    let n = 4
    
    // break up into n steps to make smooth lines
    for (let p of this.particles) {
      p.update(this.noise)
      let step = p.vel.clone().mul(1 / n)
      for (let i = 0; i < n; i++) {
        cbuf.drawPixel(p.pos.x, p.pos.y, p.col)
        p.pos.add(step)
      }
    }
    
    cbuf.flush()
  }
  
  rainbowify (oa = 0) {
    for (let p of this.particles) {
      let c = p.pos.clone().add(new Vector(-w / 2, -h / 2)),
          a = (c.a + tau / 4 + oa) / tau,
          rgb = hsl2rgb(a, 1, 0.5)
      
      rgb.push(p.col[3])
      p.col = rgb
    }
  }
}

function init () {
  frame = 0
  noise = new Noise(w, h, 5, 8)
  system = new ParticleSystem(15000, noise)
  // uncomment this and re-run to see noise texture
  // document.body.appendChild(noise.canvas)

  ctx.fillStyle = '#000'
  ctx.fillRect(0, 0, w, h)

  cbuf.clear()
  animate()
}

// click once to pause, twice to regen
function generate () {
  if (rid) {
    window.cancelAnimationFrame(rid)
    rid = 0
  } else {
    init()
  }
}

function animate () {
  frame++
  system.update()
  
  if (frame < 300)
    rid = window.requestAnimationFrame(animate)
  else rid = false
}

function save () {
  let data = cv.toDataURL()
  window.open(data)
}

// round dpr to nearest 0.5
let dpr = 2,//Math.round(devicePixelRatio * 2) * 0.5,
    w = innerWidth * dpr,
    h = innerHeight * dpr,
    noise, system, rid, frame,
    cv = document.createElement('canvas'),
    ctx = cv.getContext('2d')

// w = 2880
// h = 1800

cv.width = w
cv.height = h

let cbuf = new CanvasBuffer(cv)

document.body.appendChild(cv)
cv.addEventListener('click', generate)

document.addEventListener('keypress', e => {
  // alert(e.which)
  if (e.which == 115) save()
})

init()
